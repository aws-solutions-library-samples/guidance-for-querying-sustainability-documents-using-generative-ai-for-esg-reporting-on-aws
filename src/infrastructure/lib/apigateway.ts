#!/usr/bin/env node
import { NagSuppressions } from 'cdk-nag';

import * as cdk from 'aws-cdk-lib';
import * as logs from 'aws-cdk-lib/aws-logs';
import { Construct } from 'constructs';
import { IUserPool } from 'aws-cdk-lib/aws-cognito'
import {
    AccessLogFormat,
    AuthorizationType,
    CognitoUserPoolsAuthorizer,
    Deployment,
    LambdaIntegration,
    LogGroupLogDestination,
    MethodLoggingLevel,
    MethodOptions,
    RequestValidator,
    RestApi
} from 'aws-cdk-lib/aws-apigateway';

interface ApiStackProperties extends cdk.StackProps {
    apiLambdaProxy: LambdaIntegration
    userPool: IUserPool
    suffix: string
}


export class APIStack extends cdk.Stack {

    constructor(scope: Construct, id: string, props: ApiStackProperties) {
        super(scope, id, props);

        const prodLogGroup = new logs.LogGroup(this, 'PrdLogs');

        const api = new RestApi(this, 'ReportAPI', {
            restApiName: `sust-api-gateway-${props.suffix}`,
            endpointExportName: 'EndpointURL',
            cloudWatchRole: true,
            deployOptions: {
                accessLogDestination: new LogGroupLogDestination(prodLogGroup),
                accessLogFormat: AccessLogFormat.jsonWithStandardFields(),
                loggingLevel: MethodLoggingLevel.INFO,
                dataTraceEnabled: true
            },
        });

        const deployment = new Deployment(this, 'Deployment', {api});

        const authorizer = new CognitoUserPoolsAuthorizer(this, 'APIAuthorizer', {
            cognitoUserPools: [props.userPool],
            identitySource: 'method.request.header.Authorization'
        });
        authorizer._attachToApi(api);

        const optionsWithAuth: MethodOptions = {
            authorizationType: AuthorizationType.COGNITO,
            authorizer: {
                authorizerId: authorizer.authorizerId
            }
        }

        const postQuestionResrouce = api.root.addResource('api_proxy');
        postQuestionResrouce.addMethod('GET', props.apiLambdaProxy, optionsWithAuth);
        postQuestionResrouce.addMethod('POST', props.apiLambdaProxy, optionsWithAuth);

        new RequestValidator(this, 'APIRequestValidator', {
            restApi: api,
            requestValidatorName: 'requestValidator',
            validateRequestBody: true,
            validateRequestParameters: true,
        });

        NagSuppressions.addResourceSuppressions(
            [api],
            [
                {
                    id: 'AwsSolutions-IAM4',
                    appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'],
                    reason: 'This policy is generated by aws-cdk-lib/aws-apigateway'
                }
            ],
            true
        );
    }



}
